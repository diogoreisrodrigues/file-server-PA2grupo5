import java.math.BigInteger;
import java.security.*;
import java.util.Random;

/**
 * This class provides implementation for the DH key exchange algorithm
 */
public class DiffieHellman {

    /**
     * The base number for the Diffie-Hellman key exchange algorithm.
     */
    private static final BigInteger G = BigInteger.valueOf ( 3 );

    /**
     * The prime modulus for the Diffie-Hellman key exchange algorithm.
     */
    private static final BigInteger N = BigInteger.valueOf ( 1289971646 );

    /**
     * The number of bits for the private key generated by the Diffie-Hellman key exchange algorithm.
     */
    private static final int NUM_BITS = 128;

    /**
     * This method generates a random private key for the Diffie-Hellman key exchange algorithm.
     *
     * @return a random private key
     *
     * @throws NoSuchAlgorithmException if the SHA1PRNG algorithm is not available on the system
     */
    public static BigInteger generatePrivateKey ( ) throws NoSuchAlgorithmException {
        Random randomGenerator = SecureRandom.getInstance ( "SHA1PRNG" );
        return new BigInteger ( NUM_BITS , randomGenerator );
    }

    /**
     * This method generates a public key for the Diffie-Hellman key exchange algorithm based on the provided private key.
     *
     * @param privateKey the private key to use
     *
     * @return the public key
     */
    public static BigInteger generatePublicKey ( BigInteger privateKey ) {
        return G.modPow ( privateKey , N );
    }

    /**
     * Computes the shared secret key for the Diffie-Hellman key exchange algorithm.
     *
     * @param publicKey the public key provided by the other party
     *
     * @param privateKey the private key generated by this party
     *
     * @return the shared secret key
     */
    public static BigInteger computePrivateKey ( BigInteger publicKey , BigInteger privateKey ) {
        return publicKey.modPow ( privateKey , N );
    }
}
